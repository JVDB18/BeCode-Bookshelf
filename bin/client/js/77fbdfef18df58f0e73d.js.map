{"version":3,"sources":["webpack:///C:/Users/soult/becode/colline/node/BeCode-Bookshelf/node_modules/react-router/es/matchPath.js","webpack:///C:/Users/soult/becode/colline/node/BeCode-Bookshelf/node_modules/react-router/node_modules/path-to-regexp/index.js","webpack:///C:/Users/soult/becode/colline/node/BeCode-Bookshelf/node_modules/react-router/node_modules/isarray/index.js"],"names":["path_to_regexp__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","path_to_regexp__WEBPACK_IMPORTED_MODULE_0___default","n","patternCache","cacheCount","__webpack_exports__","pathname","options","arguments","length","undefined","parent","path","_options","_options$exact","exact","_options$strict","strict","_options$sensitive","sensitive","_compilePath","pattern","cacheKey","end","cache","keys","compiledPattern","re","compilePath","match","exec","url","values","slice","isExact","params","reduce","memo","key","index","name","isarray","module","exports","pathToRegexp","parse","compile","str","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","res","tokens","defaultDelimiter","delimiter","m","escaped","offset","next","prefix","capture","group","modifier","asterisk","push","partial","repeat","optional","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","matches","Array","i","obj","opts","data","encode","pretty","encodeURIComponent","token","segment","value","TypeError","JSON","stringify","j","test","attachKeys","flags","route","endsWithDelimiter","groups","source","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","isArray","arr","Object","prototype","call"],"mappings":"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","file":"js/77fbdfef18df58f0e73d.js","sourcesContent":["import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compilePath = function compilePath(pattern, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var keys = [];\n  var re = pathToRegexp(pattern, keys, options);\n  var compiledPattern = { re: re, keys: keys };\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledPattern;\n    cacheCount++;\n  }\n\n  return compiledPattern;\n};\n\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\nvar matchPath = function matchPath(pathname) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments[2];\n\n  if (typeof options === \"string\") options = { path: options };\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === undefined ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === undefined ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === undefined ? false : _options$sensitive;\n\n\n  if (path == null) return parent;\n\n  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),\n      re = _compilePath.re,\n      keys = _compilePath.keys;\n\n  var match = re.exec(pathname);\n\n  if (!match) return null;\n\n  var url = match[0],\n      values = match.slice(1);\n\n  var isExact = pathname === url;\n\n  if (exact && !isExact) return null;\n\n  return {\n    path: path, // the path pattern used to match\n    url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n    isExact: isExact, // whether or not we matched exactly\n    params: keys.reduce(function (memo, key, index) {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  };\n};\n\nexport default matchPath;","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n"],"sourceRoot":""}