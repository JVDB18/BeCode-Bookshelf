{"version":3,"sources":["../../src/server/authentication.js"],"names":["verifyToken","token","Promise","resolve","reject","jwt","verify","process","env","AUTH_SECRET","err","decodedToken","createToken","sessionData","options","expiresIn","algorithm","sign","data","authMiddleware","request","response","next","localstorage","getItem","then","user","catch","error","console","res","json","verifyJWTToken","createJWToken"],"mappings":";;;;;;;AAQA;;;;AAEO,MAAMA,WAAW,GAAG,UAASC,KAAT,EAAgB;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCC,0BAAIC,MAAJ,CAAWL,KAAX,EAAkBM,OAAO,CAACC,GAAR,CAAYC,WAA9B,EAA2C,CAACC,GAAD,EAAMC,YAAN,KAAuB;AAC9D,UAAID,GAAG,IAAI,CAACC,YAAZ,EAA0B;AACtBP,QAAAA,MAAM,CAACM,GAAD,CAAN;AACH;;AAEDP,MAAAA,OAAO,CAACQ,YAAD,CAAP;AACH,KAND;AAOH,GARM,CAAP;AASH,CAVM;;;;AAYA,MAAMC,WAAW,GAAG,UAASC,WAAT,EAAsB;AAC7C,QAAMC,OAAO,GAAG;AACZC,IAAAA,SAAS,EAAE,IADC;AAEZC,IAAAA,SAAS,EAAE;AAFC,GAAhB;;AAIA,MAAIf,KAAK,GAAGI,sBAAIY,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEL;AAAP,GAAT,EAA8BN,OAAO,CAACC,GAAR,CAAYC,WAA1C,EAAuDK,OAAvD,CAAZ;;AAEA,SAAOb,KAAP;AACH,CARM;;;;AAUA,MAAMkB,cAAc,GAAG,UAASC,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AAE5D,MAAIrB,KAAK,GAAGsB,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAZ;AAEAxB,EAAAA,WAAW,CAACC,KAAD,CAAX,CACKwB,IADL,CACUd,YAAY,IAAI;AAClBS,IAAAA,OAAO,CAACM,IAAR,GAAef,YAAY,CAACO,IAA5B;AACAI,IAAAA,IAAI;AACP,GAJL,EAKKK,KALL,CAKWC,KAAK,IAAI;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAE,IAAAA,GAAG,CAACC,IAAJ,CAASH,KAAT;AACH,GARL;AASH,CAbM;;;eAeQ;AACXI,EAAAA,cADW;AAEXC,EAAAA,aAFW;AAGXd,EAAAA;AAHW,C","sourcesContent":["/* becodeorg/bookshelf\r\n *\r\n * /src/server/authentication.js - Authentication logic\r\n *\r\n * coded by Tanguy@Team Noix\r\n * started at 15/02/2019\r\n */\r\n\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport const verifyToken = function(token) {\r\n    return new Promise((resolve, reject) => {\r\n        jwt.verify(token, process.env.AUTH_SECRET, (err, decodedToken) => {\r\n            if (err || !decodedToken) {\r\n                reject(err);\r\n            }\r\n\r\n            resolve(decodedToken);\r\n        });\r\n    });\r\n};\r\n\r\nexport const createToken = function(sessionData) {\r\n    const options = {\r\n        expiresIn: 3600, // Expiration time in second\r\n        algorithm: \"HS256\",\r\n    };\r\n    let token = jwt.sign({data: sessionData}, process.env.AUTH_SECRET, options);\r\n\r\n    return token;\r\n};\r\n\r\nexport const authMiddleware = function(request, response, next) {\r\n    // get token from localstorage\r\n    let token = localstorage.getItem(\"bookshelf_token\");\r\n\r\n    verifyToken(token)\r\n        .then(decodedToken => {\r\n            request.user = decodedToken.data;\r\n            next();\r\n        })\r\n        .catch(error => {\r\n            console.error(error);\r\n            res.json(error);\r\n        });\r\n};\r\n\r\nexport default {\r\n    verifyJWTToken,\r\n    createJWToken,\r\n    authMiddleware,\r\n};\r\n"],"file":"authentication.js"}