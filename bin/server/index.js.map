{"version":3,"sources":["../../src/server/index.js"],"names":["APP_PORT","process","env","app","MongoClient","require","db","dbName","DB_NAME","url","DB_USERNAME","DB_PASSWORD","DB_URL","DB_PORT","client","useNewUrlParser","connect","console","log","error","use","express","static","path","resolve","__dirname","get","req","res","method","toUpperCase","send","Users","index","listen"],"mappings":";;AAQA;;AACA;;AAEA;;;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAaC,OAAO,CAACC,GAA3B;AACA,MAAMC,GAAG,GAAG,uBAAZ;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,WAAvC;;AAEA,IAAIE,EAAE,GAAG,IAAT;;AAEA,CAAC,kBAAiB;AAOd,QAAMC,MAAM,GAAGN,OAAO,CAACC,GAAR,CAAYM,OAA3B;AACA,QAAMC,GAAG,GAAI,aAAYR,OAAO,CAACC,GAAR,CAAYQ,WAAY,IAC7CT,OAAO,CAACC,GAAR,CAAYS,WACf,IAAGV,OAAO,CAACC,GAAR,CAAYU,MAAO,IAAGX,OAAO,CAACC,GAAR,CAAYW,OAAQ,EAF9C;AAGA,QAAMC,MAAM,GAAG,IAAIV,WAAJ,CAAgBK,GAAhB,EAAqB;AAACM,IAAAA,eAAe,EAAE;AAAlB,GAArB,CAAf;;AAEA,MAAI;AAEA,UAAMD,MAAM,CAACE,OAAP,EAAN;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAEAZ,IAAAA,EAAE,GAAGQ,MAAM,CAACR,EAAP,CAAUC,MAAV,CAAL;AACH,GAPD,CAOE,OAAOY,KAAP,EAAc;AAGZF,IAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACH;;AAQD;AACH,CAjCD;;AAmCAhB,GAAG,CAACiB,GAAJ,CAAQC,iBAAQC,MAAR,CAAeC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,kBAAxB,CAAf,CAAR;AAEAtB,GAAG,CAACuB,GAAJ,CAAQ,QAAR,EAAkB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BX,EAAAA,OAAO,CAACC,GAAR,CAAa,QAAOS,GAAG,CAACE,MAAJ,CAAWC,WAAX,EAAyB,KAAIH,GAAG,CAAClB,GAAI,EAAzD;AACAmB,EAAAA,GAAG,CAACG,IAAJ,CAAS,eAAT;AACH,CAHD;AAKA5B,GAAG,CAACuB,GAAJ,CAAQ,QAAR,EAAkB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BI,iBAAMC,KAAN,CAAY3B,EAAZ,EAAgBqB,GAAhB,EAAqBC,GAArB;AACH,CAFD;AAIAzB,GAAG,CAAC+B,MAAJ,CAAWlC,QAAX,EAAqB,MACjBiB,OAAO,CAACC,GAAR,CAAa,kCAAiClB,QAAS,GAAvD,CADJ","sourcesContent":["/* becodeorg/bookshelf\n *\n * /src/server/index.js - Server entry point\n *\n * coded by leny@BeCode\n * started at 18/01/2019\n */\n\nimport express from \"express\";\nimport path from \"path\";\n\nimport Users from \"./Controllers/Users.js\";\n\nconst {APP_PORT} = process.env;\nconst app = express();\nconst MongoClient = require(\"mongodb\").MongoClient;\n\nlet db = null;\n\n(async function() {\n    /*\n     * Connect to database & keep connection alive\n     * No return value\n     * Saves connection to db variable\n     */\n\n    const dbName = process.env.DB_NAME; // Name of the database we want to use\n    const url = `mongodb://${process.env.DB_USERNAME}:${\n        process.env.DB_PASSWORD\n    }@${process.env.DB_URL}:${process.env.DB_PORT}`; // URL with credentials used to connect to database\n    const client = new MongoClient(url, {useNewUrlParser: true}); // Connection instance\n\n    try {\n        // Wait for connection to be established\n        await client.connect();\n        // Print success in server console\n        console.log(\"Connected successfully to server\");\n        // Save connection for further requests\n        db = client.db(dbName);\n    } catch (error) {\n        // If connection failed\n        // Print error in server console\n        console.error(error);\n    }\n\n    /*\n     * Avoid closing connection - we want to keep it alive for our requests (plus, NODEMON, throws an application crash notice if we do so)\n     */\n    // client.close();\n    // console.log( 'Disconnected from server' );\n    /* --- */\n    return;\n})();\n\napp.use(express.static(path.resolve(__dirname, \"../../bin/client\")));\n\napp.get(\"/hello\", (req, res) => {\n    console.log(`ℹ️  (${req.method.toUpperCase()}) ${req.url}`);\n    res.send(\"Hello, World!\");\n});\n\napp.get(\"/users\", (req, res) => {\n    Users.index(db, req, res);\n});\n\napp.listen(APP_PORT, () =>\n    console.log(`🚀 Server is listening on port ${APP_PORT}.`),\n);\n"],"file":"index.js"}