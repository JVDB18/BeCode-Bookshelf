{"version":3,"sources":["../../src/server/index.js"],"names":["APP_PORT","process","env","app","usersRouter","require","booksRouter","reviewsRouter","borrowedsRouter","url","DB_HOST","DB_PORT","DB_NAME","mongoose","connect","useNewUrlParser","user","DB_USERNAME","pass","DB_PASSWORD","dbName","authSource","db","connection","use","express","json","urlencoded","static","path","resolve","__dirname","on","console","error","bind","once","log","get","req","res","method","toUpperCase","send","post","body","email","password","Users","findOne","then","bcrypt","compareSync","token","createToken","_id","pseudo","localstorage","setItem","catch","removeItem","listen"],"mappings":"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","sourcesContent":["/* becodeorg/bookshelf\r\n *\r\n * /src/server/index.js - Server entry point\r\n *\r\n * coded by leny@BeCode & Tanguy@Team Noix\r\n * started at 18/01/2019\r\n */\r\n\r\n/*\r\n * Const & imports\r\n */\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport path from \"path\";\r\nimport cors from \"cors\";\r\nconst {APP_PORT} = process.env;\r\nconst app = express();\r\n\r\n// Import App Routers\r\nconst usersRouter = require(\"./routes/users.js\");\r\nconst booksRouter = require(\"./routes/books.js\");\r\nconst reviewsRouter = require(\"./routes/reviews.js\");\r\nconst borrowedsRouter = require(\"./routes/borroweds.js\");\r\n\r\n/*\r\n * Connection to database\r\n */\r\nconst url = `mongodb://${process.env.DB_HOST}:${process.env.DB_PORT}/${\r\n    process.env.DB_NAME\r\n}`; // URL to connect to database\r\n\r\nmongoose.connect(\r\n    url,\r\n    {\r\n        useNewUrlParser: true,\r\n        user: process.env.DB_USERNAME,\r\n        pass: process.env.DB_PASSWORD,\r\n        dbName: process.env.DB_NAME,\r\n        authSource: \"admin\",\r\n    },\r\n);\r\nconst db = mongoose.connection;\r\n/* ------ */\r\n\r\n/*\r\n * Middlewares stack\r\n */\r\n// Cross-Origin middleware\r\napp.use(cors());\r\n\r\n// Requests middlewares\r\napp.use(express.json());\r\napp.use(express.urlencoded());\r\n\r\n// Routing middlewares\r\napp.use(\"/api/users\", usersRouter);\r\napp.use(\"/api/books\", booksRouter);\r\napp.use(\"/api/reviews\", reviewsRouter);\r\napp.use(\"/api/borroweds\", borrowedsRouter);\r\n/* ------ */\r\n\r\napp.use(express.static(path.resolve(__dirname, \"../../bin/client\")));\r\n\r\ndb.on(\"error\", console.error.bind(console, \"connection error:\"));\r\ndb.once(\"open\", () => {\r\n    console.log(\"Successfully connected to server\");\r\n\r\n    /*\r\n     * Routes\r\n     */\r\n    app.get(\"/hello\", (req, res) => {\r\n        console.log(`ℹ️  (${req.method.toUpperCase()}) ${req.url}`);\r\n        res.send(\"Hello, World!\");\r\n    });\r\n\r\n    /*\r\n     * Login / Logout Routes\r\n     */\r\n    app.post(\"/login\", (req, res) => {\r\n        // Users Login\r\n        console.log(`ℹ️  (${req.method.toUpperCase()}) /api/users${req.url}`);\r\n\r\n        if (!req.body.email || !req.body.password) {\r\n            console.error(\"Please fill all field\");\r\n            res.send(\"Please fill all fields\");\r\n            return;\r\n        }\r\n\r\n        Users.findOne({email: req.body.email})\r\n            .then(user => {\r\n                if (!bcrypt.compareSync(req.body.password, user.password)) {\r\n                    console.error(\"Email or password invalid\");\r\n                    res.send(\"Email or password invalid\");\r\n                    return;\r\n                }\r\n\r\n                // Else, connect\r\n                // Create JWToken\r\n                let token = createToken({\r\n                    _id: user._id,\r\n                    pseudo: user.pseudo,\r\n                });\r\n                // Stock token in localstorage\r\n\r\n                localstorage.setItem(\"bookshelf_token\", token);\r\n                console.log(\"Successfully logged in\");\r\n                res.json(token);\r\n                return;\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                res.send(error);\r\n                return;\r\n            });\r\n    });\r\n\r\n    app.get(\"/logout\", (req, res) => {\r\n        // Users Logout\r\n        console.log(`ℹ️  (${req.method.toUpperCase()}) /api/users${req.url}`);\r\n        // clear token from localstorage\r\n        localstorage.removeItem(\"bookshelf_token\");\r\n        console.log(\"Successfully logged out\");\r\n        res.json(\"Successfully logged out\");\r\n        return;\r\n    });\r\n\r\n    /*\r\n     * Initiate Express\r\n     */\r\n    app.listen(APP_PORT, () =>\r\n        console.log(`🚀 Server is listening on port ${APP_PORT}.`),\r\n    );\r\n});\r\n"],"file":"index.js"}